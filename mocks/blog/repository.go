// Code generated by MockGen. DO NOT EDIT.
// Source: blog/repository.go

// Package mock_blog is a generated GoMock package.
package mock_blog

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	blog "github.com/robbailey3/website-api/blog"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// FindMany mocks base method.
func (m *MockRepository) FindMany(ctx context.Context, limit, skip int) ([]blog.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", ctx, limit, skip)
	ret0, _ := ret[0].([]blog.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockRepositoryMockRecorder) FindMany(ctx, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockRepository)(nil).FindMany), ctx, limit, skip)
}

// FindOneById mocks base method.
func (m *MockRepository) FindOneById(ctx context.Context, id primitive.ObjectID) (*blog.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneById", ctx, id)
	ret0, _ := ret[0].(*blog.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneById indicates an expected call of FindOneById.
func (mr *MockRepositoryMockRecorder) FindOneById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneById", reflect.TypeOf((*MockRepository)(nil).FindOneById), ctx, id)
}

// Insert mocks base method.
func (m *MockRepository) Insert(ctx context.Context, post *blog.PostDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), ctx, post)
}

// UpdateById mocks base method.
func (m *MockRepository) UpdateById(ctx context.Context, id primitive.ObjectID, updatedDoc *blog.UpdatePostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, id, updatedDoc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockRepositoryMockRecorder) UpdateById(ctx, id, updatedDoc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockRepository)(nil).UpdateById), ctx, id, updatedDoc)
}
