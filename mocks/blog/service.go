// Code generated by MockGen. DO NOT EDIT.
// Source: blog/service.go

// Package mock_blog is a generated GoMock package.
package mock_blog

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	blog "github.com/robbailey3/website-api/blog"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockService) AddPost(ctx context.Context, req *blog.AddPostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockServiceMockRecorder) AddPost(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockService)(nil).AddPost), ctx, req)
}

// DeletePost mocks base method.
func (m *MockService) DeletePost(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockServiceMockRecorder) DeletePost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockService)(nil).DeletePost), ctx, id)
}

// GetPost mocks base method.
func (m *MockService) GetPost(ctx context.Context, id string) (*blog.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(*blog.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockServiceMockRecorder) GetPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockService)(nil).GetPost), ctx, id)
}

// GetPosts mocks base method.
func (m *MockService) GetPosts(ctx context.Context, limit, offset int) ([]blog.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, limit, offset)
	ret0, _ := ret[0].([]blog.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockServiceMockRecorder) GetPosts(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockService)(nil).GetPosts), ctx, limit, offset)
}

// UpdatePost mocks base method.
func (m *MockService) UpdatePost(ctx context.Context, id string, request *blog.UpdatePostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, id, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockServiceMockRecorder) UpdatePost(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockService)(nil).UpdatePost), ctx, id, request)
}
