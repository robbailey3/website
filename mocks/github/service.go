// Code generated by MockGen. DO NOT EDIT.
// Source: github/service.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/robbailey3/website-api/github"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetRepos mocks base method.
func (m *MockService) GetRepos(req github.GetReposRequest) ([]*github.RepositoryViewModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepos", req)
	ret0, _ := ret[0].([]*github.RepositoryViewModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepos indicates an expected call of GetRepos.
func (mr *MockServiceMockRecorder) GetRepos(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepos", reflect.TypeOf((*MockService)(nil).GetRepos), req)
}

// GetUser mocks base method.
func (m *MockService) GetUser(req github.GetUserRequest) (*github.UserViewModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", req)
	ret0, _ := ret[0].(*github.UserViewModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockServiceMockRecorder) GetUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockService)(nil).GetUser), req)
}
